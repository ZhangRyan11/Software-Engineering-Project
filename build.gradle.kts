/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.6/samples
 */

plugins {
    java
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.2")
    testImplementation("org.mockito:mockito-core:4.5.1")
    // Add other dependencies as needed
}

tasks.withType<JavaCompile> {
    options.encoding = "UTF-8"
}

tasks.named<Test>("test") {
    useJUnitPlatform()
}

// Force Gradle to release resources properly and avoid file locking issues
gradle.buildFinished {
    project.buildDir.listFiles()?.forEach { dir ->
        if (dir.name.startsWith("tmp") || dir.name == "classes") {
            project.delete(dir)
        }
    }
}

// Custom clean task with retry logic for stubborn file locks
tasks.register("forceClean") {
    group = "build"
    description = "Force cleans the build directory with retry logic for locked files"
    
    doLast {
        val buildDir = project.buildDir
        val attempts = 3
        var success = false
        
        repeat(attempts) { attempt ->
            if (!success) {
                try {
                    // Attempt to force garbage collection
                    System.gc()
                    Thread.sleep(500)
                    
                    // Delete build directory
                    delete(buildDir)
                    success = true
                    println("Successfully deleted build directory on attempt ${attempt + 1}")
                } catch (e: Exception) {
                    println("Failed to delete build directory on attempt ${attempt + 1}: ${e.message}")
                    if (attempt == attempts - 1) {
                        println("Could not delete build directory after $attempts attempts.")
                        println("Please close any applications that might be using files in the build directory and try again.")
                    } else {
                        println("Retrying in 1 second...")
                        Thread.sleep(1000)
                    }
                }
            }
        }
    }
}

// Add a dependency to make sure forceClean runs before clean
tasks.named("clean") {
    dependsOn("forceClean")
}
