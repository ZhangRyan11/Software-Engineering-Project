plugins {
    id 'java'
    id 'com.google.protobuf' version '0.9.4'
    id 'eclipse'
}

eclipse.project.name = 'Cs Get Degrees'

repositories {
    mavenCentral()
}

def grpcVersion = '1.59.1'
def protobufVersion = '3.25.1'
def protocVersion = protobufVersion

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-services:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    compileOnly "org.apache.tomcat:annotations-api:6.0.53"
    
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "io.grpc:grpc-inprocess:${grpcVersion}"
    testImplementation('junit:junit:4.12')
    testImplementation('org.junit.jupiter:junit-jupiter:5.10.2')
    testImplementation('org.mockito:mockito-core:5.10.0')
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
            // Don't include the protobuf directory to avoid duplicates
            // If you need files from here, move them to src/main/proto
        }
        java {
            srcDirs 'src',
                    'build/generated/source/proto/main/grpc',
                    'build/generated/source/proto/main/java'
        }
    }
    test {
        java {
            srcDirs = ['test']
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    generatedFilesBaseDir = "$projectDir/build/generated"
}

// Important: Clean generated files
clean {
    delete protobuf.generatedFilesBaseDir
}

// Force java compilation to depend on proto generation
tasks.withType(JavaCompile) {
    dependsOn 'generateProto'
}

// Make IDE refresh after proto generation
tasks.named('generateProto').configure {
    doLast {
        println "Proto files generated in $protobuf.generatedFilesBaseDir"
    }
}

test {
    useJUnitPlatform()
    filter {
        excludeTestsMatching "project.annotations.Assignment*"
        setFailOnNoMatchingTests(false)
    }
}

// Add duplicate handling strategy for processResources task
tasks.withType(ProcessResources) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Ensure the same strategy for copy tasks
tasks.withType(Copy) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
